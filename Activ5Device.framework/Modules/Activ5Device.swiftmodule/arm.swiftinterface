// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.2.4 effective-4.2 (swiftlang-1103.0.32.9 clang-1103.0.32.53)
// swift-module-flags: -target armv7-apple-ios10.0 -enable-objc-interop -enable-library-evolution -swift-version 4.2 -enforce-exclusivity=checked -Onone -module-name Activ5Device
@_exported import Activ5Device
import CoreBluetooth
import Foundation
import Swift
public enum A5DeviceDataState {
  case handshake
  case isometric
  case stop
  case disconnected
  public static func == (a: Activ5Device.A5DeviceDataState, b: Activ5Device.A5DeviceDataState) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum A5Error : Swift.Error {
  case imuUnsupported
  public static func == (a: Activ5Device.A5Error, b: Activ5Device.A5Error) -> Swift.Bool
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public class A5Device {
  public var device: CoreBluetooth.CBPeripheral
  public var name: Swift.String?
  public var writeCharacteristic: CoreBluetooth.CBCharacteristic?
  public var readCharacteristic: CoreBluetooth.CBCharacteristic?
  public var usesNewProtocol: Swift.Bool
  public var forceCharacteristic: CoreBluetooth.CBCharacteristic?
  public var imuCharacteristic: CoreBluetooth.CBCharacteristic?
  public var timestampCharacteristic: CoreBluetooth.CBCharacteristic?
  public var communicationInitialized: Swift.Bool
  public var deviceDataState: Activ5Device.A5DeviceDataState
  public var deviceVersion: Swift.String?
  public var evergreenMode: Swift.Bool {
    get
    set(value)
  }
  public var connected: Swift.Bool {
    get
  }
  public init(device: CoreBluetooth.CBPeripheral, name: Swift.String? = nil, writeCharacteristic: CoreBluetooth.CBCharacteristic? = nil, readCharacteristic: CoreBluetooth.CBCharacteristic? = nil)
  @objc deinit
}
extension A5Device : Swift.Equatable {
  public static func == (lhs: Activ5Device.A5Device, rhs: Activ5Device.A5Device) -> Swift.Bool
}
extension A5Device : Swift.Hashable {
  public var hashValue: Swift.Int {
    get
  }
  public func hash(into hasher: inout Swift.Hasher)
}
public enum A5Command : Swift.String {
  case doHandshake
  case startIsometric
  case tare
  case stop
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
extension A5Device {
  public func sendCommand(_ command: Activ5Device.A5Command)
  public func startIsometric()
  public func stop()
  public func startIMU() throws
  public func stopIMU() throws
  public func disconnect()
}
extension A5Device {
  public func setEvergreen(_ enabled: Swift.Bool)
}
public struct A5DeviceManagerOptions {
}
public protocol A5DeviceDelegate : AnyObject {
  func searchCompleted()
  func deviceFound(device: Activ5Device.A5Device)
  func deviceConnected(device: Activ5Device.A5Device)
  func deviceDisconnected(device: Activ5Device.A5Device)
  func deviceInitialized(device: Activ5Device.A5Device)
  func didReceiveMessage(device: Activ5Device.A5Device, message: Swift.String, type: Activ5Device.MessageType)
  func didReceiveIsometric(device: Activ5Device.A5Device, value: Swift.Int)
  func didReceiveIMUData(device: Activ5Device.A5Device, value: Activ5Device.IMUObject)
  func didFailToConnect(device: Activ5Device.A5Device, error: Swift.Error?)
  func didChangeBluetoothState(_ state: CoreBluetooth.CBManagerState)
  func bluetoothIsSwitchedOff()
}
extension A5DeviceDelegate {
  public func didFailToConnect(device: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  public func didReceiveMessage(device: Activ5Device.A5Device, message: Swift.String, type: Activ5Device.MessageType)
  public func didReceiveIsometric(device: Activ5Device.A5Device, value: Swift.Int)
  public func didReceiveIMUData(device: Activ5Device.A5Device, value: Activ5Device.IMUObject)
  public func didChangeBluetoothState(_ state: CoreBluetooth.CBManagerState)
  public func bluetoothIsSwitchedOff()
}
@objc @_inheritsConvenienceInitializers public class A5DeviceManager : ObjectiveC.NSObject {
  public static var instance: Activ5Device.A5DeviceManager
  public static var delegate: Activ5Device.A5DeviceDelegate?
  public static var cbManager: CoreBluetooth.CBCentralManager
  public static var devices: [Swift.String : Activ5Device.A5Device]
  public static var connectedDevices: [Swift.String : Activ5Device.A5Device]
  public static var options: Activ5Device.A5DeviceManagerOptions
  public class func initializeDeviceManager()
  public class func scanForDevices(searchCompleted: @escaping () -> Swift.Void)
  public class func connect(device: CoreBluetooth.CBPeripheral)
  public class func disconnect(device: CoreBluetooth.CBPeripheral)
  public class func device(for peripheral: CoreBluetooth.CBPeripheral) -> (key: Swift.String, value: Activ5Device.A5Device)?
  @objc deinit
  @objc override dynamic public init()
}
extension A5DeviceManager : CoreBluetooth.CBCentralManagerDelegate {
  @objc dynamic public func centralManagerDidUpdateState(_ central: CoreBluetooth.CBCentralManager)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDiscover peripheral: CoreBluetooth.CBPeripheral, advertisementData: [Swift.String : Any], rssi RSSI: Foundation.NSNumber)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didConnect peripheral: CoreBluetooth.CBPeripheral)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didFailToConnect peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
  @objc dynamic public func centralManager(_ central: CoreBluetooth.CBCentralManager, didDisconnectPeripheral peripheral: CoreBluetooth.CBPeripheral, error: Swift.Error?)
}
extension A5DeviceManager : CoreBluetooth.CBPeripheralDelegate {
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverServices error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didDiscoverCharacteristicsFor service: CoreBluetooth.CBService, error: Swift.Error?)
  @objc dynamic public func peripheral(_ peripheral: CoreBluetooth.CBPeripheral, didUpdateValueFor characteristic: CoreBluetooth.CBCharacteristic, error: Swift.Error?)
}
public struct IMUObject {
  public var accelerationX: Swift.Double
  public var accelerationY: Swift.Double
  public var accelerationZ: Swift.Double
  public var gyroX: Swift.Double
  public var gyroY: Swift.Double
  public var gyroZ: Swift.Double
  public var timestamp: Swift.Double
  public init(accelerationX: Swift.Double, accelerationY: Swift.Double, accelerationZ: Swift.Double, gyroX: Swift.Double, gyroY: Swift.Double, gyroZ: Swift.Double, timestamp: Swift.Double)
}
public enum MessageType : Swift.String {
  case initialMessage
  case isometric
  case timestamp
  case imu
  case unknown
  public init(from message: Swift.String)
  public typealias RawValue = Swift.String
  public init?(rawValue: Swift.String)
  public var rawValue: Swift.String {
    get
  }
}
@_hasMissingDesignatedInitializers public class MessageParser {
  public class func parseMessage(characteristic: CoreBluetooth.CBCharacteristic) -> (type: Activ5Device.MessageType, value: Any?)
  public class func parseLegacyMessage(_ message: Swift.String?) -> (type: Activ5Device.MessageType, value: Any?)
  public class func parseValue(data: Foundation.Data) -> Swift.Int
  public class func parseIMUValue(data: Foundation.Data) -> Activ5Device.IMUObject
  @objc deinit
}
extension Int {
  public var toGForce: Swift.Double {
    get
  }
  public var toRadPerSec: Swift.Double {
    get
  }
  public var toSec: Swift.Double {
    get
  }
}
extension Double {
  public var fromGForce: Swift.Int {
    get
  }
  public var fromRadPerSec: Swift.Int {
    get
  }
  public var fromSec: Swift.Int {
    get
  }
}
